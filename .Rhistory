}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mat <- x$get()
m <- Solve(mat)
x$setinverse(m)
m
}
a<-matrix(c(1,0,5,2,1,6,3,4,0),nrow=3,ncol=3)
a
solve(a)
my_mat <- makeCacheMatrix(a)
cacheSolve(my_mat)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mat <- x$get()
m <- solve(mat)
x$setinverse(m)
m
}
cacheSolve(my_mat)
cacheSolve(my_mat)
b<-cacheSolve(my_mat)
makeCacheMatrix(b)
my_mat<-makeCacheMatrix(b)
cacheSolve(my_mat)
cacheSolve(my_mat)
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mat <- x$get()
m <- solve(mat)
x$setinverse(m)
m
}
mm <- makeCacheMatrix(a)
cacheSolve(mm)
cacheSolve(mm)
## makeCacheMatrix and cacheSolve work in conjunction to invert a matrix, but
## only invert the matrix if not previously done.  a stored value is returned
## if previously calculated
## makeCacheMatrix is a function that stores a list of functions
## the functions allow one to get the matrix, set the matrix, get its inverse (potentially null), and set its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve checks whether matrix inverse m exists, if it exists, m is returned
## if m does not exist, the matrix is retrieved and inverted, and m is returned
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
mat <- x$get()
m <- solve(mat)
x$setinverse(m)
m
}
set.seed(1)
rpois(5,2)
rep(0:1,each=5)
set.seed(10)
x<-rep(0:1,each=5)
e<-rnorm(10,0,20)
y<-0.5=2*x+e
y<-0.5+2*x+e
y
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
ggplot(movies, aes(votes, rating))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
install.packages("httpuv")
GET("https://api.github.com/rate_limit", gtoken)
install.packages("jsonlite")
str(json1)
library(jsonlite)
library(jsonlite)
library(jsonlite)
install.packages("jsonlite")
library(jsonlite)
library(httr)
library(httpuv)
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "c0fc3cf72363438ff2c1",
secret = "d4623e84a141476097e54f8d3b67f0819b61bb80")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
d<-GET("https://api.github.com/rate_limit", gtoken)
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
d<- GET("https://api.github.com/rate_limit", gtoken)
d
json1<-content(d)
json2<-jsonlite::fromJSON(toJSON(json1)
)
json2[1,1:4]
str(json2)
names(json2)
json2$resources
json2$rate
str(json2)
c<- fromJSON("https://api.github.com/users/jtleek/repos")
names(c)
c$name
str(c)
c1<-c[c$name=="datasharing",]
c1
c1$created_at
install.packages("sqldf")
library(sqldf)
acs<- file("q2acs.csv")
head(acs)
str(acs)
acs<- read.csv("q2ac.cvs")
acs<- read.csv("q2ac.csv")
acs<- read.csv("q2acs.csv")
str(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
?unique
sqldf("select distinct AGEP from acs")
sqldf("select AGEP where unique from acs")
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
library(XML)
doc <- htmlTreeParse(url,useInternalNodes = TRUE)
doc
str(doc)
install.packages("RCurl")
library(RCurl)
doc<- getURL(url)
str(doc)
page<- readLines(tc <- textConnection(doc)); close(tc)
str(page)
chr{1}
page[1]
page[2]
page[5]
nchar(page[10])
nchar(page[20])
nchar(page[30])
nchar(page[100])
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for","q5.txt")
x <- read.fwf(
file="q5.txt",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
xx
x
head(x)
x[1,1]
x[1,2]
sum(x$V4)
getwd()
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
SCC
head(SCC)
head(NEI)
tail(NEI)
str(NEI)
unique(NEI$year)
unique(NEI$type)
unique(NEI$Pollutant)
nrow(NEI)
sum(NEI$Emissions)
sum(NEI$Emissions[NEI$year==1999])
sum(NEI$Emissions[NEI$year==unique(NEI$year)])
unique(NEI$year)
typeof(unique(NEI$year))
sum(with(NEI$Emissions),unique(NEI$year))
tapply(NEI$Emissions,NEI$year,sum)
a<-tapply(NEI$Emissions,NEI$year,sum)
a
a[1]
a[[1]]
a[1,1]
dim(a)
nrow(a)
ncol(a)
plot(unique(NEI$year),a)
plot(toString(unique(NEI$year)),a)
b<-c(1,2,3,5)
toString(b)
lapply(unique(NEI$year),toString)
y <- tapply(NEI$Emissions,NEI$year,sum)
x <- lapply(unique(NEI$year),toString)
plot(x,y)
y <- tapply(NEI$Emissions,NEI$year,sum)
#x <- lapply(unique(NEI$year),toString)
#plot(x,y)
barplot(y)
y <- tapply(NEI$Emissions,NEI$year,sum) / 1000000
#x <- lapply(unique(NEI$year),toString)
#plot(x,y)
barplot(y)
y <- tapply(NEI$Emissions,NEI$year,sum) / 1000000
#x <- lapply(unique(NEI$year),toString)
#plot(x,y)
barplot(y,xlab="Year",ylab="Sum of Emissions",main="Total PM2.5 Emissions")
y <- tapply(NEI$Emissions,NEI$year,sum) / 1000000
barplot(y,xlab="Year",ylab="Sum of Emissions (millions of tons)",main="Total PM2.5 Emissions")
NEI <- readRDS("summarySCC_PM25.rds")
y <- tapply(NEI$Emissions,NEI$year,sum) / 1000000
barplot(y,xlab="Year",ylab="Sum of Emissions (millions of tons)",main="Total PM2.5 Emissions")
dev.copy(png,'plot1.png')
dev.off()
NEI2 <- NEI[NEI$fips=="24510",]
nrow(NEI2)
NEI2 <- NEI[NEI$fips=="24510",]
y <- tapply(NEI2$Emissions,NEI2$year,sum) / 1000000
barplot(y,xlab="Year",ylab="Sum of Emissions (millions of tons)",main="Total PM2.5 Emissions")
dev.copy(png,'plot2.png')
dev.off()
NEI2 <- NEI[NEI$fips=="24510",]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Baltimore City, Maryland: Total PM2.5 Emissions")
dev.copy(png,'plot2.png')
dev.off()
library(ggplot2)
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ factor,ncol=2)
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(breaks=1:4,labels=unique(NEI2$year))
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(breaks=1:4,labels=factor(unique(NEI2$year)))
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)
g
g<-ggplot(NEI2,aes(year,Emissions))+qplot(stat="identity")+facet_wrap(~ type,ncol=2)
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(labels=unique(NEI2$year))
g
unique(NEI2$year)
typeof(NEI2$year)
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(name=unique(NEI2$year))
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(labels=as.character(unique(NEI2$year)))
g
as.character(unique(NEI2$year))
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(breaks=4,labels=as.character(unique(NEI2$year)))
length(as.character(unique(NEI2$year)))
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(limits=unique(NEI2$year)
)
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+scale_x_discrete(limits=c(1999,2002,2005,2008))
g
g<-ggplot(NEI2,aes(year,Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)
g
g<-ggplot(NEI2,aes(factor(year),Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)
g
library(ggplot2)
NEI <- readRDS("summarySCC_PM25.rds")
NEI2 <- NEI[NEI$fips=="24510",]
ggplot(NEI2,aes(factor(year),Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)
dev.copy(png,'plot3.png')
dev.off()
NEI2 <- NEI[NEI$fips=="24510",]
ggplot(NEI2,aes(factor(year),Emissions))+geom_bar(stat="identity")+facet_wrap(~ type,ncol=2)+ggtitle("Baltimore City Emissions by Source")
dev.copy(png,'plot3.png')
dev.off()
str(SCC)
unique(SCC$SCC.Level.One)
unique(SCC$SCC.Level.Two)
grep("coal",SCC$SCC.Level.Three)
SCC$SCC.Level.Three[grep("coal",SCC$SCC.Level.Three)]
SCC$SCC.Level.Four[grep("coal",SCC$SCC.Level.Four)]
SCC$Short.Name[grep("coal",SCC$Short.Name)]
tail(SCC$Short.Name[grep("coal",SCC$Short.Name)])
tail(SCC$Short.Name[grep("coal",SCC$Short.Name)&&grep("combustion",SCC$Short.Name)])
grep("coal",SCC$Short.Name)
grep("combustion",SCC$Short.Name)
SCC$Short.Name[grep("combustion",SCC$Short.Name)]
str(SCC)
head(SCC)
SCC$SCC.Level.One[grep("coal",SCC$SCC.Level.One)]
SCC$SCC.Level.Two[grep("coal",SCC$SCC.Level.Two)]
SCC$SCC.Level.Three[grep("coal",SCC$SCC.Level.Three)]
a<-SCC$SCC.Level.Three[grep("coal",SCC$SCC.Level.Three)]
a[1:20]
a[21:40]
a[41:60]
SCC$SCC.Level.Four[grep("coal",SCC$SCC.Level.Four)]
str(SCC)
unique(SCC$SCC.Level.One)
unique(SCC$SCC.Level.Two)
unique(SCC$SCC.Level.Three)
SCC$SCC.Level.Three[grep("coal",SCC$SCC.Level.Three)]
a<-SCC$SCC.Level.Three[grep("coal",SCC$SCC.Level.Three)]
length(a)
a<-SCC$SCC.Level.Three[grep("Coal",SCC$SCC.Level.Three)]
a
unique(SCC$SCC.Level.One)
b<-SCC$SCC.Level.Four[grep("Combustion",SCC$SCC.Level.Four)]
b
c<-SCC$SCC.Level.Four[grep("combustion",SCC$SCC.Level.Four)]
c
c<-SCC$SCC.Level.Four[grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE)]
c
grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE)
grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE)
grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE)&&grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE)
intersect(grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE),grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE))
d<-intersect(grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE),grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE))
SCC$SCC.Level.Three[d]
SCC$SCC.Level.Four[d]
subset <- intersect(grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE),grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE))
NEI2 <- NEI[NEI$SCC==SCC[subset],]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Emissions from Coal Combustion Sources")
dev.copy(png,'plot4.png')
dev.off()
subset <- intersect(grep("combustion",SCC$SCC.Level.Four,ignore.case=TRUE),grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE))
NEI2 <- NEI[NEI$SCC==SCC$SCC[subset],]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Emissions from Coal Combustion Sources")
dev.copy(png,'plot4.png')
dev.off()
SCC$SCC[subset]
subset
SCC$Short.Name[subset]
SCC$Short.Name[1:100]
SCC$Short.Name[101:200]
subset <- intersect(grep("comb",SCC$SCC.Level.Four,ignore.case=TRUE),grep("coal",SCC$SCC.Level.Three,ignore.case=TRUE))
NEI2 <- NEI[NEI$SCC==SCC$SCC[subset],]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Emissions from Coal Combustion Sources")
dev.copy(png,'plot4.png')
dev.off()
subset
subset <- intersect(grep("comb",SCC$Short.Name,ignore.case=TRUE),grep("coal",SCC$Short.Name,ignore.case=TRUE))
NEI2 <- NEI[NEI$SCC==SCC$SCC[subset],]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Emissions from Coal Combustion Sources")
dev.copy(png,'plot4.png')
dev.off()
subset <- intersect(grep("comb",SCC$Short.Name,ignore.case=TRUE),grep("coal",SCC$Short.Name,ignore.case=TRUE))
subset
SCC$SCC[subset]
f<-c(1,2,3,4,5)
f[f==c(1,2)]
f[f==c(1.5,2)]
f[f==c(3,2)]
SCC[subset,]
unique(NEI$SCC)
c(3,2) %in% c(1:10)
c(1:10) %in% C(3,2)
subset <- intersect(grep("comb",SCC$Short.Name,ignore.case=TRUE),grep("coal",SCC$Short.Name,ignore.case=TRUE))
#NEI2 <- NEI[NEI$SCC==SCC$SCC[subset],]
NEI2 <- NEI[SCC$SCC[subset] %in% NEI$SCC,]
y <- tapply(NEI2$Emissions,NEI2$year,sum)
barplot(y,xlab="Year",ylab="Sum of Emissions (tons)",main="Emissions from Coal Combustion Sources")
dev.copy(png,'plot4.png')
dev.off()
nrow(NEI2)
nrow(NEI)
SCC$SCC[subset]
h<-matrix(nrow=length(subset),ncol=2)
h[,1]<-SCC$SCC[subset]
h[1,1]
h[2,1]
h
SCC$SCC[subset]
length(subset)
SCC$SCC[1]
subset
SCC$SCC[[1]]
SCC$SCC[[subset]]
sum(NEI$Emissions[NEI$SCC="10100101"])
sum(NEI$Emissions[NEI$SCC=="10100101"])
sum(NEI$Emissions[NEI$SCC=="10100102"])
sum(NEI$Emissions[NEI$SCC=="10100201"])
m<-matrix(nrow=91,ncol=2)
for(i in 1:91){
m[i,1]<-SCC$SCC[subset[i]]
m[i,2]<-sum(NEI$Emissions[NEI$SCC==m[i,1]])
}
m
SCC$SCC[subset[1]]
SCC$SCC[subset[2]]
m<-matrix(nrow=91,ncol=2)
for(i in 1:5){
m[i,1]<-SCC$SCC[subset[i]]
m[i,2]<-sum(NEI$Emissions[NEI$SCC==m[i,1]])
}
m
SCC$SCC[subset[2]]
SCC$SCC[subset[[i}]]
SCC$SCC[subset[[i]]
]
SCC$SCC[subset[[i]]]
m<-matrix(nrow=91,ncol=2)
for(i in 1:5){
m[i,1]<-SCC$SCC[subset[[i]]]
m[i,2]<-sum(NEI$Emissions[NEI$SCC==m[i,1]])
}
m
a<- read.csv("q3q3.csv",colClasses = c("character","numeric","character","numeric"))
a<- read.csv("q3q3.csv",colClasses = c("character","numeric","character","character"))
str(a)
b<- read.csv("q3q3b.csv")
c<- merge(a,b,by.x="Country",by.y="CountryCode")
nrow(c)
c2<- c2[order(-c2$Ranking)]
c2<- c[order(-c$Ranking)]
c2<- c[order(-c$Ranking),]
c2[13,]
tail(c2,13)
head(c2,13)
unique(c2$Ranking)
d<- cut(c2$Ranking,breaks=quantile(c2$Ranking,c(.2,.4,.6,.8)))
table(d)
d<- cut(c2$Ranking,breaks=quantile(c2$Ranking,c(0,.2,.4,.6,.8,1)))
table(d)
table(d,c2$Income.Group)
flat(table(d,c2$Income.Group))
daysteps <- tapply(dat$steps, dat$date, FUN=sum, na.rm = TRUE)
library(lubridate)
dat <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
dat$date <- as.Date(dat$date, "%Y-%m-%d")
dat$interval <- strptime(sprintf("%04d",dat$interval), "%H%M")
getwd()
setwd("C:/Users/brian/Documents/repdata1")
library(lubridate)
dat <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
dat$date <- as.Date(dat$date, "%Y-%m-%d")
dat$interval <- strptime(sprintf("%04d",dat$interval), "%H%M")
setwd("C:\\Users\\brian\\Documents\\repdata1\\RepData_PeerAssessment1")
head(dat)
library(lubridate)
dat <- read.csv("activity.csv", colClasses = c("numeric", "character", "numeric"))
dat$date <- as.Date(dat$date, "%Y-%m-%d")
dat$interval <- strptime(sprintf("%04d",dat$interval), "%H%M")
daysteps <- tapply(dat$steps, dat$date, FUN=sum, na.rm = TRUE)
hist(daysteps, main="Histogram of Steps per Day", xlab="Steps per Day")
mean(daysteps)
median(daysteps)
timesteps <- tapply(dat$steps, dat$interval, FUN=mean, na.rm = TRUE)
str(dat$interval)
str(dat$steps)
head(dat$steps)
head(dat$interval)
timesteps <- tapply(dat$steps, as.numeric(dat$interval), FUN=mean, na.rm = TRUE)
plot(unique(dat$interval), timesteps, type="l")
tail(dat$interval)
str(timesteps)
